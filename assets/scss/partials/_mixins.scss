// Media queries
@mixin tablet {
  @media screen and (min-width: 520px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: 800px) {
    @content;
  }
}

// Repeating code
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin sizes($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin goal-image-ratio-correction($initial-ratio, $wanted-ratio: $goal-image-wanted-ratio) {
  $ratio-correction: $initial-ratio - $wanted-ratio;
  overflow: hidden;
  
  img {
    width: (1 + $ratio-correction) * 100%;              // Correct ratio in function of the height
    margin-left: - (($ratio-correction / 2) * 100%);    // Center the image
  }
}

// 
// Vendor prefixes
// 

// Flexbox
@mixin display-flex {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex-wrap($value) {
  -ms-flex-wrap: $value;
      flex-wrap: $value;
}

@mixin flex-column {
     -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
     -ms-flex-direction: column;
         flex-direction: column;
}

@mixin justify-content($value) {
  @if $value == center {
    -webkit-box-pack: center;
       -ms-flex-pack: center;
     justify-content: center;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
       -ms-flex-pack: justify;
     justify-content: space-between;
  } @else if $value == flex-start {
    -webkit-box-pack: start;
       -ms-flex-pack: start;
     justify-content: flex-start;
  }
}

@mixin align-items($value) {
  @if $value == center {
    -webkit-box-align: center;
       -ms-flex-align: center;
          align-items: center;
  } @else if $value == flex-start {
    -webkit-box-align: start;
       -ms-flex-align: start;
          align-items: flex-start;
  }
}

@mixin flex($grow, $shrink, $basis) {
  -webkit-box-flex: $grow;
          -ms-flex: $grow $shrink $basis;
              flex: $grow $shrink $basis;
}

@mixin if-supports-flexbox {
  @supports (display: flex) or (display: -webkit-box) or (display: -ms-flexbox) {
    @content;
  }
}

@mixin if-supports-not-flexbox {
  @supports (not (display: flex)) and (not (display: -webkit-box)) and (not (display: -ms-flexbox)) {
    @content;
  }
}


// Box sizing and shadow
@mixin box-sizing($value) {
  -webkit-box-sizing: $value;
          box-sizing: $value;
}

@mixin box-shadow($x: 0, $y: 0, $blur: 0, $spread: 0, $color: transparent, $none: false) {
  @if $none {
    -webkit-box-shadow: none;
            box-shadow: none;
  } @else {
    -webkit-box-shadow: $x $y $blur $spread $color;
            box-shadow: $x $y $blur $spread $color;
  }
}

@mixin if-supports-box-shadow {
  @supports (box-shadow: 0 0 0 0 black) or (-webkit-box-shadow: 0 0 0 0 black) {
    @content;
  }
}

@mixin if-supports-not-box-shadow {
  @supports (not (box-shadow: 0 0 0 0 black)) and (not (-webkit-box-shadow: 0 0 0 0 black)) {
    @content;
  }
}

// Placeholder modification with vendor prefixies

@mixin placeholder-custom($args...) {
  $vendor-placeholders: "::-webkit-input-placeholder", ":-ms-input-placeholder", "::-ms-input-placeholder", "::placeholder";
  @each $placeholder in $vendor-placeholders {
    &#{$placeholder} {
      @each $name, $value in keywords($args) {
        #{$name}: $value;
      }
    }
  }
}


// others

@mixin transform($value) {
  -webkit-transform: $value;
          transform: $value;
}

@mixin width-max-content {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
}

@mixin user-select-none {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
    }
